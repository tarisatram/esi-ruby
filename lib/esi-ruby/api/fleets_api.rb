=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

OpenAPI spec version: 0.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module EsiClient
  class FleetsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Kick fleet member
    # Kick a fleet member  --- Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/` 
    # @param fleet_id ID for a fleet
    # @param member_id The character ID of a member in this fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [nil]
    def delete_fleets_fleet_id_members_member_id(fleet_id, member_id, opts = {})
      delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, opts)
      return nil
    end

    # Kick fleet member
    # Kick a fleet member  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60; 
    # @param fleet_id ID for a fleet
    # @param member_id The character ID of a member in this fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.delete_fleets_fleet_id_members_member_id ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.delete_fleets_fleet_id_members_member_id" if fleet_id.nil?
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling FleetsApi.delete_fleets_fleet_id_members_member_id" if member_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/members/{member_id}/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s).sub('{' + 'member_id' + '}', member_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#delete_fleets_fleet_id_members_member_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete fleet squad
    # Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/` 
    # @param fleet_id ID for a fleet
    # @param squad_id The squad to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [nil]
    def delete_fleets_fleet_id_squads_squad_id(fleet_id, squad_id, opts = {})
      delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, opts)
      return nil
    end

    # Delete fleet squad
    # Delete a fleet squad, only empty squads can be deleted  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
    # @param fleet_id ID for a fleet
    # @param squad_id The squad to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, squad_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.delete_fleets_fleet_id_squads_squad_id ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.delete_fleets_fleet_id_squads_squad_id" if fleet_id.nil?
      # verify the required parameter 'squad_id' is set
      fail ArgumentError, "Missing the required parameter 'squad_id' when calling FleetsApi.delete_fleets_fleet_id_squads_squad_id" if squad_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/squads/{squad_id}/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s).sub('{' + 'squad_id' + '}', squad_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#delete_fleets_fleet_id_squads_squad_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete fleet wing
    # Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/` 
    # @param fleet_id ID for a fleet
    # @param wing_id The wing to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [nil]
    def delete_fleets_fleet_id_wings_wing_id(fleet_id, wing_id, opts = {})
      delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, opts)
      return nil
    end

    # Delete fleet wing
    # Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
    # @param fleet_id ID for a fleet
    # @param wing_id The wing to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, wing_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.delete_fleets_fleet_id_wings_wing_id ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.delete_fleets_fleet_id_wings_wing_id" if fleet_id.nil?
      # verify the required parameter 'wing_id' is set
      fail ArgumentError, "Missing the required parameter 'wing_id' when calling FleetsApi.delete_fleets_fleet_id_wings_wing_id" if wing_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/wings/{wing_id}/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s).sub('{' + 'wing_id' + '}', wing_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#delete_fleets_fleet_id_wings_wing_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get fleet information
    # Return details about a fleet  --- Alternate route: `/v1/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/dev/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds
    # @param fleet_id ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [GetFleetsFleetIdOk]
    def get_fleets_fleet_id(fleet_id, opts = {})
      data, _status_code, _headers = get_fleets_fleet_id_with_http_info(fleet_id, opts)
      return data
    end

    # Get fleet information
    # Return details about a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60;  --- This route is cached for up to 5 seconds
    # @param fleet_id ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(GetFleetsFleetIdOk, Fixnum, Hash)>] GetFleetsFleetIdOk data, response status code and response headers
    def get_fleets_fleet_id_with_http_info(fleet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.get_fleets_fleet_id ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.get_fleets_fleet_id" if fleet_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetFleetsFleetIdOk')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#get_fleets_fleet_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get fleet members
    # Return information about fleet members  --- Alternate route: `/v1/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/dev/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds
    # @param fleet_id ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :language Language to use in the response (default to en-us)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<GetFleetsFleetIdMembers200Ok>]
    def get_fleets_fleet_id_members(fleet_id, opts = {})
      data, _status_code, _headers = get_fleets_fleet_id_members_with_http_info(fleet_id, opts)
      return data
    end

    # Get fleet members
    # Return information about fleet members  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60;  --- This route is cached for up to 5 seconds
    # @param fleet_id ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :language Language to use in the response
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(Array<GetFleetsFleetIdMembers200Ok>, Fixnum, Hash)>] Array<GetFleetsFleetIdMembers200Ok> data, response status code and response headers
    def get_fleets_fleet_id_members_with_http_info(fleet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.get_fleets_fleet_id_members ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.get_fleets_fleet_id_members" if fleet_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      if opts[:'language'] && !['de', 'en-us', 'fr', 'ja', 'ru', 'zh'].include?(opts[:'language'])
        fail ArgumentError, 'invalid value for "language", must be one of de, en-us, fr, ja, ru, zh'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/members/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GetFleetsFleetIdMembers200Ok>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#get_fleets_fleet_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get fleet wings
    # Return information about wings in a fleet  --- Alternate route: `/v1/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/dev/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds
    # @param fleet_id ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :language Language to use in the response (default to en-us)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<GetFleetsFleetIdWings200Ok>]
    def get_fleets_fleet_id_wings(fleet_id, opts = {})
      data, _status_code, _headers = get_fleets_fleet_id_wings_with_http_info(fleet_id, opts)
      return data
    end

    # Get fleet wings
    # Return information about wings in a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60;  --- This route is cached for up to 5 seconds
    # @param fleet_id ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :language Language to use in the response
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(Array<GetFleetsFleetIdWings200Ok>, Fixnum, Hash)>] Array<GetFleetsFleetIdWings200Ok> data, response status code and response headers
    def get_fleets_fleet_id_wings_with_http_info(fleet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.get_fleets_fleet_id_wings ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.get_fleets_fleet_id_wings" if fleet_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      if opts[:'language'] && !['de', 'en-us', 'fr', 'ja', 'ru', 'zh'].include?(opts[:'language'])
        fail ArgumentError, 'invalid value for "language", must be one of de, en-us, fr, ja, ru, zh'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/wings/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<GetFleetsFleetIdWings200Ok>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#get_fleets_fleet_id_wings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create fleet invitation
    # Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  --- Alternate route: `/v1/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/dev/fleets/{fleet_id}/members/` 
    # @param fleet_id ID for a fleet
    # @param invitation Details of the invitation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [nil]
    def post_fleets_fleet_id_members(fleet_id, invitation, opts = {})
      post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, opts)
      return nil
    end

    # Create fleet invitation
    # Invite a character into the fleet, if a character has a CSPA charge set, it is not possible to invite them to the fleet using ESI  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/&#x60; 
    # @param fleet_id ID for a fleet
    # @param invitation Details of the invitation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_fleets_fleet_id_members_with_http_info(fleet_id, invitation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.post_fleets_fleet_id_members ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.post_fleets_fleet_id_members" if fleet_id.nil?
      # verify the required parameter 'invitation' is set
      fail ArgumentError, "Missing the required parameter 'invitation' when calling FleetsApi.post_fleets_fleet_id_members" if invitation.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/members/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(invitation)
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#post_fleets_fleet_id_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create fleet wing
    # Create a new wing in a fleet  --- Alternate route: `/v1/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/dev/fleets/{fleet_id}/wings/` 
    # @param fleet_id ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [PostFleetsFleetIdWingsCreated]
    def post_fleets_fleet_id_wings(fleet_id, opts = {})
      data, _status_code, _headers = post_fleets_fleet_id_wings_with_http_info(fleet_id, opts)
      return data
    end

    # Create fleet wing
    # Create a new wing in a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/&#x60; 
    # @param fleet_id ID for a fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(PostFleetsFleetIdWingsCreated, Fixnum, Hash)>] PostFleetsFleetIdWingsCreated data, response status code and response headers
    def post_fleets_fleet_id_wings_with_http_info(fleet_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.post_fleets_fleet_id_wings ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.post_fleets_fleet_id_wings" if fleet_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/wings/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostFleetsFleetIdWingsCreated')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#post_fleets_fleet_id_wings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create fleet squad
    # Create a new squad in a fleet  --- Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/` 
    # @param fleet_id ID for a fleet
    # @param wing_id The wing_id to create squad in
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [PostFleetsFleetIdWingsWingIdSquadsCreated]
    def post_fleets_fleet_id_wings_wing_id_squads(fleet_id, wing_id, opts = {})
      data, _status_code, _headers = post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, opts)
      return data
    end

    # Create fleet squad
    # Create a new squad in a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/squads/&#x60; 
    # @param fleet_id ID for a fleet
    # @param wing_id The wing_id to create squad in
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(PostFleetsFleetIdWingsWingIdSquadsCreated, Fixnum, Hash)>] PostFleetsFleetIdWingsWingIdSquadsCreated data, response status code and response headers
    def post_fleets_fleet_id_wings_wing_id_squads_with_http_info(fleet_id, wing_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.post_fleets_fleet_id_wings_wing_id_squads ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.post_fleets_fleet_id_wings_wing_id_squads" if fleet_id.nil?
      # verify the required parameter 'wing_id' is set
      fail ArgumentError, "Missing the required parameter 'wing_id' when calling FleetsApi.post_fleets_fleet_id_wings_wing_id_squads" if wing_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/wings/{wing_id}/squads/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s).sub('{' + 'wing_id' + '}', wing_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PostFleetsFleetIdWingsWingIdSquadsCreated')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#post_fleets_fleet_id_wings_wing_id_squads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update fleet
    # Update settings about a fleet  --- Alternate route: `/v1/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/dev/fleets/{fleet_id}/` 
    # @param fleet_id ID for a fleet
    # @param new_settings What to update for this fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [nil]
    def put_fleets_fleet_id(fleet_id, new_settings, opts = {})
      put_fleets_fleet_id_with_http_info(fleet_id, new_settings, opts)
      return nil
    end

    # Update fleet
    # Update settings about a fleet  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/&#x60; 
    # @param fleet_id ID for a fleet
    # @param new_settings What to update for this fleet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_fleets_fleet_id_with_http_info(fleet_id, new_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.put_fleets_fleet_id ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.put_fleets_fleet_id" if fleet_id.nil?
      # verify the required parameter 'new_settings' is set
      fail ArgumentError, "Missing the required parameter 'new_settings' when calling FleetsApi.put_fleets_fleet_id" if new_settings.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(new_settings)
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#put_fleets_fleet_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move fleet member
    # Move a fleet member around  --- Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/` 
    # @param fleet_id ID for a fleet
    # @param member_id The character ID of a member in this fleet
    # @param movement Details of the invitation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [nil]
    def put_fleets_fleet_id_members_member_id(fleet_id, member_id, movement, opts = {})
      put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, opts)
      return nil
    end

    # Move fleet member
    # Move a fleet member around  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/members/{member_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/members/{member_id}/&#x60; 
    # @param fleet_id ID for a fleet
    # @param member_id The character ID of a member in this fleet
    # @param movement Details of the invitation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_fleets_fleet_id_members_member_id_with_http_info(fleet_id, member_id, movement, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.put_fleets_fleet_id_members_member_id ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.put_fleets_fleet_id_members_member_id" if fleet_id.nil?
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling FleetsApi.put_fleets_fleet_id_members_member_id" if member_id.nil?
      # verify the required parameter 'movement' is set
      fail ArgumentError, "Missing the required parameter 'movement' when calling FleetsApi.put_fleets_fleet_id_members_member_id" if movement.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/members/{member_id}/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s).sub('{' + 'member_id' + '}', member_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(movement)
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#put_fleets_fleet_id_members_member_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename fleet squad
    # Rename a fleet squad  --- Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/` 
    # @param fleet_id ID for a fleet
    # @param naming New name of the squad
    # @param squad_id The squad to rename
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [nil]
    def put_fleets_fleet_id_squads_squad_id(fleet_id, naming, squad_id, opts = {})
      put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, naming, squad_id, opts)
      return nil
    end

    # Rename fleet squad
    # Rename a fleet squad  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/squads/{squad_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/squads/{squad_id}/&#x60; 
    # @param fleet_id ID for a fleet
    # @param naming New name of the squad
    # @param squad_id The squad to rename
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_fleets_fleet_id_squads_squad_id_with_http_info(fleet_id, naming, squad_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.put_fleets_fleet_id_squads_squad_id ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.put_fleets_fleet_id_squads_squad_id" if fleet_id.nil?
      # verify the required parameter 'naming' is set
      fail ArgumentError, "Missing the required parameter 'naming' when calling FleetsApi.put_fleets_fleet_id_squads_squad_id" if naming.nil?
      # verify the required parameter 'squad_id' is set
      fail ArgumentError, "Missing the required parameter 'squad_id' when calling FleetsApi.put_fleets_fleet_id_squads_squad_id" if squad_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/squads/{squad_id}/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s).sub('{' + 'squad_id' + '}', squad_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(naming)
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#put_fleets_fleet_id_squads_squad_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename fleet wing
    # Rename a fleet wing  --- Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/` 
    # @param fleet_id ID for a fleet
    # @param naming New name of the wing
    # @param wing_id The wing to rename
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from (default to tranquility)
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [nil]
    def put_fleets_fleet_id_wings_wing_id(fleet_id, naming, wing_id, opts = {})
      put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, naming, wing_id, opts)
      return nil
    end

    # Rename fleet wing
    # Rename a fleet wing  --- Alternate route: &#x60;/v1/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/legacy/fleets/{fleet_id}/wings/{wing_id}/&#x60;  Alternate route: &#x60;/dev/fleets/{fleet_id}/wings/{wing_id}/&#x60; 
    # @param fleet_id ID for a fleet
    # @param naming New name of the wing
    # @param wing_id The wing to rename
    # @param [Hash] opts the optional parameters
    # @option opts [String] :datasource The server name you would like data from
    # @option opts [String] :token Access token to use if unable to set a header
    # @option opts [String] :user_agent Client identifier, takes precedence over headers
    # @option opts [String] :x_user_agent Client identifier, takes precedence over User-Agent
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_fleets_fleet_id_wings_wing_id_with_http_info(fleet_id, naming, wing_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FleetsApi.put_fleets_fleet_id_wings_wing_id ..."
      end
      # verify the required parameter 'fleet_id' is set
      fail ArgumentError, "Missing the required parameter 'fleet_id' when calling FleetsApi.put_fleets_fleet_id_wings_wing_id" if fleet_id.nil?
      # verify the required parameter 'naming' is set
      fail ArgumentError, "Missing the required parameter 'naming' when calling FleetsApi.put_fleets_fleet_id_wings_wing_id" if naming.nil?
      # verify the required parameter 'wing_id' is set
      fail ArgumentError, "Missing the required parameter 'wing_id' when calling FleetsApi.put_fleets_fleet_id_wings_wing_id" if wing_id.nil?
      if opts[:'datasource'] && !['tranquility', 'singularity'].include?(opts[:'datasource'])
        fail ArgumentError, 'invalid value for "datasource", must be one of tranquility, singularity'
      end
      # resource path
      local_var_path = "/fleets/{fleet_id}/wings/{wing_id}/".sub('{format}','json').sub('{' + 'fleet_id' + '}', fleet_id.to_s).sub('{' + 'wing_id' + '}', wing_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'datasource'] = opts[:'datasource'] if !opts[:'datasource'].nil?
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user_agent'] = opts[:'user_agent'] if !opts[:'user_agent'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-User-Agent'] = opts[:'x_user_agent'] if !opts[:'x_user_agent'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(naming)
      auth_names = ['evesso']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FleetsApi#put_fleets_fleet_id_wings_wing_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
