=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

OpenAPI spec version: 0.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module EsiClient
  # 200 ok object
  class GetWarsWarIdOk
    attr_accessor :aggressor

    # allied corporations or alliances, each object contains either corporation_id or alliance_id
    attr_accessor :allies

    # Time that the war was declared
    attr_accessor :declared

    attr_accessor :defender

    # Time the war ended and shooting was no longer allowed
    attr_accessor :finished

    # ID of the specified war
    attr_accessor :id

    # Was the war declared mutual by both parties
    attr_accessor :mutual

    # Is the war currently open for allies or not
    attr_accessor :open_for_allies

    # Time the war was retracted but both sides could still shoot each other
    attr_accessor :retracted

    # Time when the war started and both sides could shoot each other
    attr_accessor :started


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aggressor' => :'aggressor',
        :'allies' => :'allies',
        :'declared' => :'declared',
        :'defender' => :'defender',
        :'finished' => :'finished',
        :'id' => :'id',
        :'mutual' => :'mutual',
        :'open_for_allies' => :'open_for_allies',
        :'retracted' => :'retracted',
        :'started' => :'started'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'aggressor' => :'GetWarsWarIdAggressor',
        :'allies' => :'Array<GetWarsWarIdAlly>',
        :'declared' => :'DateTime',
        :'defender' => :'GetWarsWarIdDefender',
        :'finished' => :'DateTime',
        :'id' => :'Integer',
        :'mutual' => :'BOOLEAN',
        :'open_for_allies' => :'BOOLEAN',
        :'retracted' => :'DateTime',
        :'started' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'aggressor')
        self.aggressor = attributes[:'aggressor']
      end

      if attributes.has_key?(:'allies')
        if (value = attributes[:'allies']).is_a?(Array)
          self.allies = value
        end
      end

      if attributes.has_key?(:'declared')
        self.declared = attributes[:'declared']
      end

      if attributes.has_key?(:'defender')
        self.defender = attributes[:'defender']
      end

      if attributes.has_key?(:'finished')
        self.finished = attributes[:'finished']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'mutual')
        self.mutual = attributes[:'mutual']
      end

      if attributes.has_key?(:'open_for_allies')
        self.open_for_allies = attributes[:'open_for_allies']
      end

      if attributes.has_key?(:'retracted')
        self.retracted = attributes[:'retracted']
      end

      if attributes.has_key?(:'started')
        self.started = attributes[:'started']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @declared.nil?
        invalid_properties.push("invalid value for 'declared', declared cannot be nil.")
      end

      if @id.nil?
        invalid_properties.push("invalid value for 'id', id cannot be nil.")
      end

      if @mutual.nil?
        invalid_properties.push("invalid value for 'mutual', mutual cannot be nil.")
      end

      if @open_for_allies.nil?
        invalid_properties.push("invalid value for 'open_for_allies', open_for_allies cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @declared.nil?
      return false if @id.nil?
      return false if @mutual.nil?
      return false if @open_for_allies.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aggressor == o.aggressor &&
          allies == o.allies &&
          declared == o.declared &&
          defender == o.defender &&
          finished == o.finished &&
          id == o.id &&
          mutual == o.mutual &&
          open_for_allies == o.open_for_allies &&
          retracted == o.retracted &&
          started == o.started
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [aggressor, allies, declared, defender, finished, id, mutual, open_for_allies, retracted, started].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = EsiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
