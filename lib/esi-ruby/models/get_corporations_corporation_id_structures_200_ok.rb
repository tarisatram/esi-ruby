=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

OpenAPI spec version: 0.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module EsiClient
  # 200 ok object
  class GetCorporationsCorporationIdStructures200Ok
    # ID of the corporation that owns the structure
    attr_accessor :corporation_id

    # This week's vulnerability windows, Monday is day 0
    attr_accessor :current_vul

    # Date on which the structure will run out of fuel
    attr_accessor :fuel_expires

    # Next week's vulnerability windows, Monday is day 0
    attr_accessor :next_vul

    # The id of the ACL profile for this citadel
    attr_accessor :profile_id

    # Contains a list of service upgrades, and their state
    attr_accessor :services

    # Date at which the structure will move to it's next state
    attr_accessor :state_timer_end

    # Date at which the structure entered it's current state
    attr_accessor :state_timer_start

    # The Item ID of the structure
    attr_accessor :structure_id

    # The solar system the structure is in
    attr_accessor :system_id

    # The type id of the structure
    attr_accessor :type_id

    # Date at which the structure will unanchor
    attr_accessor :unanchors_at


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'corporation_id' => :'corporation_id',
        :'current_vul' => :'current_vul',
        :'fuel_expires' => :'fuel_expires',
        :'next_vul' => :'next_vul',
        :'profile_id' => :'profile_id',
        :'services' => :'services',
        :'state_timer_end' => :'state_timer_end',
        :'state_timer_start' => :'state_timer_start',
        :'structure_id' => :'structure_id',
        :'system_id' => :'system_id',
        :'type_id' => :'type_id',
        :'unanchors_at' => :'unanchors_at'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'corporation_id' => :'Integer',
        :'current_vul' => :'Array<GetCorporationsCorporationIdStructuresCurrentVul>',
        :'fuel_expires' => :'Date',
        :'next_vul' => :'Array<GetCorporationsCorporationIdStructuresNextVul>',
        :'profile_id' => :'Integer',
        :'services' => :'Array<GetCorporationsCorporationIdStructuresService>',
        :'state_timer_end' => :'Date',
        :'state_timer_start' => :'Date',
        :'structure_id' => :'Integer',
        :'system_id' => :'Integer',
        :'type_id' => :'Integer',
        :'unanchors_at' => :'Date'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'corporation_id')
        self.corporation_id = attributes[:'corporation_id']
      end

      if attributes.has_key?(:'current_vul')
        if (value = attributes[:'current_vul']).is_a?(Array)
          self.current_vul = value
        end
      end

      if attributes.has_key?(:'fuel_expires')
        self.fuel_expires = attributes[:'fuel_expires']
      end

      if attributes.has_key?(:'next_vul')
        if (value = attributes[:'next_vul']).is_a?(Array)
          self.next_vul = value
        end
      end

      if attributes.has_key?(:'profile_id')
        self.profile_id = attributes[:'profile_id']
      end

      if attributes.has_key?(:'services')
        if (value = attributes[:'services']).is_a?(Array)
          self.services = value
        end
      end

      if attributes.has_key?(:'state_timer_end')
        self.state_timer_end = attributes[:'state_timer_end']
      end

      if attributes.has_key?(:'state_timer_start')
        self.state_timer_start = attributes[:'state_timer_start']
      end

      if attributes.has_key?(:'structure_id')
        self.structure_id = attributes[:'structure_id']
      end

      if attributes.has_key?(:'system_id')
        self.system_id = attributes[:'system_id']
      end

      if attributes.has_key?(:'type_id')
        self.type_id = attributes[:'type_id']
      end

      if attributes.has_key?(:'unanchors_at')
        self.unanchors_at = attributes[:'unanchors_at']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @corporation_id.nil?
        invalid_properties.push("invalid value for 'corporation_id', corporation_id cannot be nil.")
      end

      if @current_vul.nil?
        invalid_properties.push("invalid value for 'current_vul', current_vul cannot be nil.")
      end

      if @next_vul.nil?
        invalid_properties.push("invalid value for 'next_vul', next_vul cannot be nil.")
      end

      if @profile_id.nil?
        invalid_properties.push("invalid value for 'profile_id', profile_id cannot be nil.")
      end

      if @structure_id.nil?
        invalid_properties.push("invalid value for 'structure_id', structure_id cannot be nil.")
      end

      if @system_id.nil?
        invalid_properties.push("invalid value for 'system_id', system_id cannot be nil.")
      end

      if @type_id.nil?
        invalid_properties.push("invalid value for 'type_id', type_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @corporation_id.nil?
      return false if @current_vul.nil?
      return false if @next_vul.nil?
      return false if @profile_id.nil?
      return false if @structure_id.nil?
      return false if @system_id.nil?
      return false if @type_id.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          corporation_id == o.corporation_id &&
          current_vul == o.current_vul &&
          fuel_expires == o.fuel_expires &&
          next_vul == o.next_vul &&
          profile_id == o.profile_id &&
          services == o.services &&
          state_timer_end == o.state_timer_end &&
          state_timer_start == o.state_timer_start &&
          structure_id == o.structure_id &&
          system_id == o.system_id &&
          type_id == o.type_id &&
          unanchors_at == o.unanchors_at
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [corporation_id, current_vul, fuel_expires, next_vul, profile_id, services, state_timer_end, state_timer_start, structure_id, system_id, type_id, unanchors_at].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = EsiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
