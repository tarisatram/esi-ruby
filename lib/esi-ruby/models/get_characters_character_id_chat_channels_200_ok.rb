=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

OpenAPI spec version: 0.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module EsiClient
  # 200 ok object
  class GetCharactersCharacterIdChatChannels200Ok
    # allowed array
    attr_accessor :allowed

    # blocked array
    attr_accessor :blocked

    # Unique channel ID. Always negative for player-created channels. Permanent (CCP created) channels have a positive ID, but don't appear in the API
    attr_accessor :channel_id

    # Normalized, unique string used to compare channel names
    attr_accessor :comparison_key

    # Whether this is a password protected channel
    attr_accessor :has_password

    # Message of the day for this channel
    attr_accessor :motd

    # muted array
    attr_accessor :muted

    # Displayed name of channel
    attr_accessor :name

    # operators array
    attr_accessor :operators

    # owner_id integer
    attr_accessor :owner_id


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'allowed' => :'allowed',
        :'blocked' => :'blocked',
        :'channel_id' => :'channel_id',
        :'comparison_key' => :'comparison_key',
        :'has_password' => :'has_password',
        :'motd' => :'motd',
        :'muted' => :'muted',
        :'name' => :'name',
        :'operators' => :'operators',
        :'owner_id' => :'owner_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'allowed' => :'Array<GetCharactersCharacterIdChatChannelsAllowed>',
        :'blocked' => :'Array<GetCharactersCharacterIdChatChannelsBlocked>',
        :'channel_id' => :'Integer',
        :'comparison_key' => :'String',
        :'has_password' => :'BOOLEAN',
        :'motd' => :'String',
        :'muted' => :'Array<GetCharactersCharacterIdChatChannelsMuted>',
        :'name' => :'String',
        :'operators' => :'Array<GetCharactersCharacterIdChatChannelsOperator>',
        :'owner_id' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'allowed')
        if (value = attributes[:'allowed']).is_a?(Array)
          self.allowed = value
        end
      end

      if attributes.has_key?(:'blocked')
        if (value = attributes[:'blocked']).is_a?(Array)
          self.blocked = value
        end
      end

      if attributes.has_key?(:'channel_id')
        self.channel_id = attributes[:'channel_id']
      end

      if attributes.has_key?(:'comparison_key')
        self.comparison_key = attributes[:'comparison_key']
      end

      if attributes.has_key?(:'has_password')
        self.has_password = attributes[:'has_password']
      end

      if attributes.has_key?(:'motd')
        self.motd = attributes[:'motd']
      end

      if attributes.has_key?(:'muted')
        if (value = attributes[:'muted']).is_a?(Array)
          self.muted = value
        end
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'operators')
        if (value = attributes[:'operators']).is_a?(Array)
          self.operators = value
        end
      end

      if attributes.has_key?(:'owner_id')
        self.owner_id = attributes[:'owner_id']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @allowed.nil?
        invalid_properties.push("invalid value for 'allowed', allowed cannot be nil.")
      end

      if @blocked.nil?
        invalid_properties.push("invalid value for 'blocked', blocked cannot be nil.")
      end

      if @channel_id.nil?
        invalid_properties.push("invalid value for 'channel_id', channel_id cannot be nil.")
      end

      if @comparison_key.nil?
        invalid_properties.push("invalid value for 'comparison_key', comparison_key cannot be nil.")
      end

      if @has_password.nil?
        invalid_properties.push("invalid value for 'has_password', has_password cannot be nil.")
      end

      if @motd.nil?
        invalid_properties.push("invalid value for 'motd', motd cannot be nil.")
      end

      if @muted.nil?
        invalid_properties.push("invalid value for 'muted', muted cannot be nil.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      if @operators.nil?
        invalid_properties.push("invalid value for 'operators', operators cannot be nil.")
      end

      if @owner_id.nil?
        invalid_properties.push("invalid value for 'owner_id', owner_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @allowed.nil?
      return false if @blocked.nil?
      return false if @channel_id.nil?
      return false if @comparison_key.nil?
      return false if @has_password.nil?
      return false if @motd.nil?
      return false if @muted.nil?
      return false if @name.nil?
      return false if @operators.nil?
      return false if @owner_id.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          allowed == o.allowed &&
          blocked == o.blocked &&
          channel_id == o.channel_id &&
          comparison_key == o.comparison_key &&
          has_password == o.has_password &&
          motd == o.motd &&
          muted == o.muted &&
          name == o.name &&
          operators == o.operators &&
          owner_id == o.owner_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [allowed, blocked, channel_id, comparison_key, has_password, motd, muted, name, operators, owner_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = EsiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
