=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

OpenAPI spec version: 0.5.3

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module EsiClient
  # pin object
  class GetCharactersCharacterIdPlanetsPlanetIdPin
    # expiry_time string
    attr_accessor :expiry_time

    attr_accessor :extractor_details

    attr_accessor :factory_details

    # install_time string
    attr_accessor :install_time

    # last_cycle_start string
    attr_accessor :last_cycle_start

    # latitude number
    attr_accessor :latitude

    # longitude number
    attr_accessor :longitude

    # pin_id integer
    attr_accessor :pin_id

    # schematic_id integer
    attr_accessor :schematic_id

    # type_id integer
    attr_accessor :type_id


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'expiry_time' => :'expiry_time',
        :'extractor_details' => :'extractor_details',
        :'factory_details' => :'factory_details',
        :'install_time' => :'install_time',
        :'last_cycle_start' => :'last_cycle_start',
        :'latitude' => :'latitude',
        :'longitude' => :'longitude',
        :'pin_id' => :'pin_id',
        :'schematic_id' => :'schematic_id',
        :'type_id' => :'type_id'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'expiry_time' => :'DateTime',
        :'extractor_details' => :'GetCharactersCharacterIdPlanetsPlanetIdExtractorDetails',
        :'factory_details' => :'GetCharactersCharacterIdPlanetsPlanetIdFactoryDetails',
        :'install_time' => :'DateTime',
        :'last_cycle_start' => :'DateTime',
        :'latitude' => :'Float',
        :'longitude' => :'Float',
        :'pin_id' => :'Integer',
        :'schematic_id' => :'Integer',
        :'type_id' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'expiry_time')
        self.expiry_time = attributes[:'expiry_time']
      end

      if attributes.has_key?(:'extractor_details')
        self.extractor_details = attributes[:'extractor_details']
      end

      if attributes.has_key?(:'factory_details')
        self.factory_details = attributes[:'factory_details']
      end

      if attributes.has_key?(:'install_time')
        self.install_time = attributes[:'install_time']
      end

      if attributes.has_key?(:'last_cycle_start')
        self.last_cycle_start = attributes[:'last_cycle_start']
      end

      if attributes.has_key?(:'latitude')
        self.latitude = attributes[:'latitude']
      end

      if attributes.has_key?(:'longitude')
        self.longitude = attributes[:'longitude']
      end

      if attributes.has_key?(:'pin_id')
        self.pin_id = attributes[:'pin_id']
      end

      if attributes.has_key?(:'schematic_id')
        self.schematic_id = attributes[:'schematic_id']
      end

      if attributes.has_key?(:'type_id')
        self.type_id = attributes[:'type_id']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @latitude.nil?
        invalid_properties.push("invalid value for 'latitude', latitude cannot be nil.")
      end

      if @longitude.nil?
        invalid_properties.push("invalid value for 'longitude', longitude cannot be nil.")
      end

      if @pin_id.nil?
        invalid_properties.push("invalid value for 'pin_id', pin_id cannot be nil.")
      end

      if @type_id.nil?
        invalid_properties.push("invalid value for 'type_id', type_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @latitude.nil?
      return false if @longitude.nil?
      return false if @pin_id.nil?
      return false if @type_id.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          expiry_time == o.expiry_time &&
          extractor_details == o.extractor_details &&
          factory_details == o.factory_details &&
          install_time == o.install_time &&
          last_cycle_start == o.last_cycle_start &&
          latitude == o.latitude &&
          longitude == o.longitude &&
          pin_id == o.pin_id &&
          schematic_id == o.schematic_id &&
          type_id == o.type_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [expiry_time, extractor_details, factory_details, install_time, last_cycle_start, latitude, longitude, pin_id, schematic_id, type_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = EsiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
